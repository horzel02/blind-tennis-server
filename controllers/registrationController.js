// server/controllers/registrationController.js
import prisma from '../prismaClient.js';
import * as registrationService from '../services/registrationService.js';
import * as tournamentService from '../services/tournamentService.js';
import * as tournamentUserRoleService from '../services/tournamentUserRoleService.js';

// POST /api/tournaments/:id/registrations
export async function createRegistration(req, res) {
  try {
    const tournamentId = parseInt(req.params.id, 10);
    const userId = req.user.id;

    const tour = await tournamentService.findTournamentById(tournamentId);
    if (!tour) return res.status(404).json({ error: 'Turniej nie istnieje' });
    if (tour.type !== 'open')
      return res.status(400).json({ error: 'Ten turniej jest wyÅ‚Ä…cznie na zaproszenia' });
    if (!tour.applicationsOpen)
      return res.status(400).json({ error: 'ZgÅ‚oszenia sÄ… zamkniÄ™te' });
    if (tour.registration_deadline && new Date() > new Date(tour.registration_deadline))
      return res.status(400).json({ error: 'Termin rejestracji minÄ…Å‚' });

    const existing = await registrationService.findByTournamentAndUser(tournamentId, userId);
    if (existing)
      return res.status(400).json({ error: 'JuÅ¼ wysÅ‚aÅ‚eÅ› zgÅ‚oszenie do tego turnieju' });

    const reg = await registrationService.createRegistration(tournamentId, userId);
    return res.status(201).json(reg);
  } catch (err) {
    console.error('ğŸ’¥ [createRegistration]', err);
    return res.status(500).json({ error: err.message });
  }
}

// POST /api/tournaments/:id/invite
export async function inviteUser(req, res) {
  try {
    const tournamentId = parseInt(req.params.id, 10);
    const { userId }   = req.body;
    const callerId     = req.user.id;

    // 1) Turniej
    const tour = await tournamentService.findTournamentById(tournamentId);
    if (!tour) {
      return res.status(404).json({ error: 'Turniej nie istnieje' });
    }

    // 2) Uprawnienia: oryginalny creator LUB invited organizer
    const isCreator = tour.organizer_id === callerId;
    const isInvitedOrg = Boolean(
      await prisma.tournamentuserrole.findFirst({
        where: { tournamentId, userId: callerId, role: 'organizer' }
      })
    );
    if (!isCreator && !isInvitedOrg) {
      return res.status(403).json({ error: 'Brak uprawnieÅ„ (tylko organizator)' });
    }

    // 3) Czy juÅ¼ jest zgÅ‚oszenie?
    const existing = await registrationService.findByTournamentAndUser(tournamentId, userId);
    if (existing) {
      if (existing.status === 'rejected') {
        // przywracamy zaproszenie
        const updated = await registrationService.updateRegistrationStatus(existing.id, 'invited');
        return res.json(updated);
      }
      return res.status(400).json({ error: 'Ten gracz juÅ¼ jest zgÅ‚oszony' });
    }

    // 4) Tworzymy zaproszenie
    const reg = await registrationService.createRegistration(tournamentId, userId, 'invited');
    return res.status(201).json(reg);

  } catch (err) {
    console.error(err);
    return res.status(500).json({ error: err.message });
  }
}

// GET /api/tournaments/:id/registrations
export async function getAllRegistrationsForOrganizer(req, res) {
  try {
    const tournamentId = parseInt(req.params.id, 10);
    const userId = req.user.id;

    // 1) Pobierz turniej
    const tourn = await tournamentService.findTournamentById(tournamentId);
    if (!tourn) {
      return res.status(404).json({ error: 'Turniej nie istnieje' });
    }

    // 2) SprawdÅº czy to twÃ³rca turnieju
    if (tourn.organizer_id !== userId) {
      // 3) JeÅ›li nie â€“ sprawdÅº czy w tabeli tournamentUserRole ma rolÄ™ 'organizer'
      const row = await prisma.tournamentuserrole.findFirst({
        where: { tournamentId, userId, role: 'organizer' }
      });
      if (!row) {
        return res.status(403).json({ error: 'Tylko organizator moÅ¼e przeglÄ…daÄ‡ zgÅ‚oszenia' });
      }
    }

    // 4) JeÅ›li ktÃ³ryÅ› z powyÅ¼szych warunkÃ³w przeszedÅ‚ - zwrÃ³Ä‡ zgÅ‚oszenia
    const regs = await registrationService.getRegistrationsByTournament(tournamentId);
    return res.json(regs);

  } catch (err) {
    console.error('ğŸ’¥ [getAllRegistrationsForOrganizer] wyjÄ…tek:', err);
    return res.status(500).json({ error: err.message });
  }
}

// GET /api/tournaments/:id/registrations/me 
export async function getMyRegistration(req, res) {
  try {
    const tournamentId = parseInt(req.params.id, 10);
    const userId = req.user.id;

    const tour = await tournamentService.findTournamentById(tournamentId);
    if (!tour) {
      return res.status(404).json({ error: 'Turniej nie istnieje' });
    }

    const reg = await registrationService.findByTournamentAndUser(tournamentId, userId);
    if (!reg) {
      return res.json(null);
    }

    const regWithUser = await registrationService.findByIdWithUser(reg.id);
    res.json(regWithUser);
  } catch (err) {
    console.error('ğŸ’¥ [getMyRegistration] wyjÄ…tek:', err);
    res.status(500).json({ error: err.message });
  }
}

// GET /api/tournaments/:id/registrations/count 
export async function getAcceptedCount(req, res) {
  try {
    const tournamentId = parseInt(req.params.id, 10);
    const tour = await tournamentService.findTournamentById(tournamentId);
    if (!tour) {
      return res.status(404).json({ error: 'Turniej nie istnieje' });
    }
    const count = await registrationService.countAcceptedRegistrations(tournamentId);
    res.json({ acceptedCount: count });
  } catch (err) {
    console.error('ğŸ’¥ [getAcceptedCount] wyjÄ…tek:', err);
    res.status(500).json({ error: err.message });
  }
}

// PATCH /api/registrations/:regId
export async function updateRegistrationStatus(req, res) {
  try {
    const regId = parseInt(req.params.regId, 10);
    const { status } = req.body; // 'accepted' | 'rejected' | 'pending'
    const userId = req.user.id;

    // 1) Pobierz zgÅ‚oszenie + turniej
    const reg = await registrationService.findById(regId);
    if (!reg) return res.status(404).json({ error: 'ZgÅ‚oszenie nie istnieje' });
    const tourn = await tournamentService.findTournamentById(reg.tournamentId);

    // 2) Dowiedz siÄ™, czy to twÃ³rca turniejuâ€¦
    const isCreator = tourn.organizer_id === userId;
    // â€¦czy zaproszony organizator
    const row = await prisma.tournamentuserrole.findFirst({
      where: { tournamentId: tourn.id, userId, role: 'organizer' }
    });
    const isInvitedOrg = Boolean(row);

    // 3) Teraz uÅ¼yj tych flag w logice uprawnieÅ„:

    // a) CofniÄ™cie zaakceptowanego â†’ tylko org. lub zaproszony org. moÅ¼e do 'pending'
    if (reg.status === 'accepted') {
      if (!(isCreator || isInvitedOrg) || status !== 'pending') {
        return res.status(403).json({ error: 'Tylko organizator moÅ¼e anulowaÄ‡ zaakceptowane' });
      }
    }
    // b) CofniÄ™cie odrzuconego â†’ to samo
    else if (reg.status === 'rejected') {
      if (!(isCreator || isInvitedOrg) || status !== 'pending') {
        return res.status(403).json({ error: 'Tylko organizator moÅ¼e przywrÃ³ciÄ‡ odrzucone' });
      }
    }
    // c) Zaproszenie â†’ tylko zaproszony user moÅ¼e przyjÄ…Ä‡
    else if (reg.status === 'invited') {
      if (!(status === 'accepted' && reg.userId === userId)) {
        return res.status(403).json({ error: 'Do anulowania zaproszenia uÅ¼yj DELETE' });
      }
    }
    // d) Self-registration (pending) â†’ org. lub zaproszony org. moÅ¼e accepted/rejected
    else if (reg.status === 'pending') {
      if (!((isCreator || isInvitedOrg) && ['accepted', 'rejected'].includes(status))) {
        return res.status(403).json({ error: 'Tylko organizator moÅ¼e zdecydowaÄ‡ o zgÅ‚oszeniu' });
      }
    }
    // e) Inne â†’ nie pozwalamy
    else {
      return res.status(400).json({ error: 'Nie moÅ¼na zmieniÄ‡ tego statusu' });
    }

    // 4) Wykonaj update
    const updated = await registrationService.updateRegistrationStatus(regId, status);

    // 5) JeÅ¼eli status zmieniÅ‚ siÄ™ na "accepted", dodaj rolÄ™ "participant"
    if (status === 'accepted') {
      try {
        await tournamentUserRoleService.addRole(tourn.id, reg.userId, 'participant');
      } catch (e) {

      }
    }
   return res.json(updated);

  } catch (err) {
    console.error('ğŸ’¥ [updateRegistrationStatus] wyjÄ…tek:', err);
    return res.status(500).json({ error: err.message });
  }
}

// DELETE /api/registrations/:regId
// UsuniÄ™cie zgÅ‚oszenia lub anulowanie zaproszenia
export async function deleteRegistration(req, res) {
  try {
    const regId = parseInt(req.params.regId, 10);
    const userId = req.user.id;
    const isAdminOrOrganizer = req.user.roles.includes('admin');

    const reg = await registrationService.findById(regId);
    if (!reg) {
      return res.status(404).json({ error: 'ZgÅ‚oszenie nie istnieje' });
    }
    const tour = await tournamentService.findTournamentById(reg.tournamentId);
    const canDelete = (
      reg.userId === userId ||
      tour.organizer_id === userId ||
      isAdminOrOrganizer
    );
    if (!canDelete) {
      return res.status(403).json({ error: 'Brak uprawnieÅ„ do usuniÄ™cia zgÅ‚oszenia' });
    }

    await tournamentUserRoleService.removeRole(reg.tournamentId, reg.userId, 'participant');
    await registrationService.deleteRegistration(regId);
    res.json({ message: 'ZgÅ‚oszenie usuniÄ™te' });
  } catch (err) {
    console.error('ğŸ’¥ [deleteRegistration] wyjÄ…tek:', err);
    res.status(500).json({ error: err.message });
  }
}


export async function getAllMyRegistrations(req, res) {
  try {
    const userId = req.user.id
    // serwis zwrÃ³ci listÄ™ z includem turnieju
    const regs = await registrationService.findAllByUser(userId)
    // dla bezpieczeÅ„stwa moÅ¼esz tutaj przemapowaÄ‡ odpowiedÅº, np.:
    const out = regs.map(r => ({
      registrationId: r.id,
      status:         r.status,
      tournament:     r.tournament   // zawiera caÅ‚y obiekt turnieju
    }))
    res.json(out)
  } catch (err) {
    console.error('ğŸ’¥ [getAllMyRegistrations]', err)
    res.status(500).json({ error: err.message })
  }
}
