generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model roles {
  id                Int          @id @default(autoincrement())
  role_name         String       @unique(map: "role_name") @db.VarChar(50)
  creation_date     DateTime     @default(now()) @db.Timestamp(0)
  modification_date DateTime     @default(now()) @db.Timestamp(0)
  active            Boolean      @default(true)
  user_roles        user_roles[]
}

model tournament {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  description             String?                   @db.Text
  category                String                    @db.VarChar(10)
  gender                  String                    @db.VarChar(10)
  street                  String                    @db.VarChar(255)
  postalCode              String                    @db.VarChar(10)
  city                    String                    @db.VarChar(100)
  country                 String                    @db.VarChar(100)
  start_date              DateTime                  @db.Date
  end_date                DateTime                  @db.Date
  registration_deadline   DateTime?
  participant_limit       Int?
  applicationsOpen        Boolean                   @default(true)
  type                    String                    @default("open") @db.VarChar(10) // "open" | "invite"
  organizer_id            Int
  organizer               users                     @relation(fields: [organizer_id], references: [id])
  created_at              DateTime                  @default(now()) @db.Timestamp(0)
  updated_at              DateTime                  @default(now()) @db.Timestamp(0)

  // relacja do zgłoszeń (TournamentRegistration)
  tournamentRegistrations TournamentRegistration[]

  // relacja do per-turniejowych ról
  tournamentUserRoles     TournamentUserRole[]
}

model user_roles {
  id              Int      @id @default(autoincrement())
  user_id         Int
  role_id         Int
  assignment_date DateTime @default(now()) @db.Timestamp(0)
  users           users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_roles_ibfk_1")
  roles           roles    @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "user_roles_ibfk_2")

  @@index([role_id], map: "role_id")
  @@index([user_id], map: "user_id")
}

model users {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(100)
  surname                 String                    @db.VarChar(100)
  email                   String                    @unique(map: "email") @db.VarChar(100)
  password_hash           String                    @db.VarChar(255)
  creation_date           DateTime                  @default(now()) @db.Timestamp(0)
  modification_date       DateTime                  @default(now()) @db.Timestamp(0)
  active                  Boolean                   @default(true)
  user_roles              user_roles[]
  tournaments             tournament[]
  
  // relacja do zgłoszeń (TournamentRegistration)
  tournamentRegistrations TournamentRegistration[]

  // relacja do per-turniejowych ról
  tournamentUserRoles     TournamentUserRole[]
}

model TournamentRegistration {
  id             Int       @id @default(autoincrement())
  tournamentId   Int
  userId         Int
  status         String    @default("pending") @db.VarChar(10) // "pending" | "accepted" | "rejected" | "invited"
  createdAt      DateTime  @default(now()) @db.Timestamp(0)
  updatedAt    DateTime  @default(now()) @updatedAt
  invitedBy     Int?      @db.Int 

  tournament     tournament @relation(fields: [tournamentId], references: [id])
  user           users      @relation(fields: [userId], references: [id])

  @@index([tournamentId], map: "TournamentRegistration_tournamentId_index")
  @@index([userId], map: "TournamentRegistration_userId_index")
  @@index([invitedBy])
}

model TournamentUserRole {
  id            Int       @id @default(autoincrement())
  tournamentId  Int
  userId        Int
  role          String    @db.VarChar(20) // "organizer" | "participant" | "referee"
  createdAt     DateTime  @default(now())

  tournament    tournament @relation(fields: [tournamentId], references: [id])
  user          users      @relation(fields: [userId], references: [id])

  @@unique([tournamentId, userId, role])
  @@index([tournamentId])
  @@index([userId])
}
